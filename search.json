[
  {
    "objectID": "plugin.html",
    "href": "plugin.html",
    "title": "Whisper Plugin",
    "section": "",
    "text": "source",
    "crumbs": [
      "Whisper Plugin"
    ]
  },
  {
    "objectID": "plugin.html#testing-the-plugin",
    "href": "plugin.html#testing-the-plugin",
    "title": "Whisper Plugin",
    "section": "Testing the Plugin",
    "text": "Testing the Plugin\n\n# Test basic functionality\nplugin = WhisperLocalPlugin()\n\n# Check availability\nprint(f\"Whisper available: {plugin.is_available()}\")\nprint(f\"Plugin name: {plugin.name}\")\nprint(f\"Plugin version: {plugin.version}\")\nprint(f\"Supported formats: {plugin.supported_formats}\")\n\nWhisper available: True\nPlugin name: whisper_local\nPlugin version: 1.0.0\nSupported formats: ['wav', 'mp3', 'flac', 'm4a', 'ogg', 'webm', 'mp4', 'avi', 'mov']\n\n\n\n# Test configuration schema\nschema = plugin.get_config_schema()\nprint(\"Available models:\")\nfor model in schema[\"properties\"][\"model\"][\"enum\"]:\n    print(f\"  - {model}\")\n\nAvailable models:\n  - tiny\n  - tiny.en\n  - base\n  - base.en\n  - small\n  - small.en\n  - medium\n  - medium.en\n  - large\n  - large-v1\n  - large-v2\n  - large-v3\n\n\n\n# Test configuration validation\ntest_configs = [\n    ({\"model\": \"tiny\"}, \"Valid config\"),\n    ({\"model\": \"invalid\"}, \"Invalid model\"),\n    ({\"temperature\": 1.5}, \"Temperature out of range\"),\n]\n\nfor config, description in test_configs:\n    is_valid, error = plugin.validate_config(config)\n    print(f\"{description}: Valid={is_valid}\")\n    if error:\n        print(f\"  Error: {error[:100]}\")\n\nValid config: Valid=True\nInvalid model: Valid=False\n  Error: 'invalid' is not one of ['tiny', 'tiny.en', 'base', 'base.en', 'small', 'small.en', 'medium', 'mediu\nTemperature out of range: Valid=False\n  Error: 'model' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'http://json\n\n\n\n# Test initialization\nplugin.initialize({\"model\": \"tiny\", \"device\": \"cpu\"})\nprint(f\"Current config: {plugin.get_current_config()['model']}\")\n\nCurrent config: tiny",
    "crumbs": [
      "Whisper Plugin"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cjm-transcription-plugin-whisper",
    "section": "",
    "text": "pip install cjm_transcription_plugin_whisper",
    "crumbs": [
      "cjm-transcription-plugin-whisper"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cjm-transcription-plugin-whisper",
    "section": "",
    "text": "pip install cjm_transcription_plugin_whisper",
    "crumbs": [
      "cjm-transcription-plugin-whisper"
    ]
  },
  {
    "objectID": "index.html#project-structure",
    "href": "index.html#project-structure",
    "title": "cjm-transcription-plugin-whisper",
    "section": "Project Structure",
    "text": "Project Structure\nnbs/\n└── plugin.ipynb # Plugin implementation for OpenAI Whisper transcription\nTotal: 1 notebook across 1 directory",
    "crumbs": [
      "cjm-transcription-plugin-whisper"
    ]
  },
  {
    "objectID": "index.html#module-dependencies",
    "href": "index.html#module-dependencies",
    "title": "cjm-transcription-plugin-whisper",
    "section": "Module Dependencies",
    "text": "Module Dependencies\ngraph LR\n    plugin[plugin&lt;br/&gt;Whisper Plugin]\n\nNo cross-module dependencies detected.",
    "crumbs": [
      "cjm-transcription-plugin-whisper"
    ]
  },
  {
    "objectID": "index.html#cli-reference",
    "href": "index.html#cli-reference",
    "title": "cjm-transcription-plugin-whisper",
    "section": "CLI Reference",
    "text": "CLI Reference\nNo CLI commands found in this project.",
    "crumbs": [
      "cjm-transcription-plugin-whisper"
    ]
  },
  {
    "objectID": "index.html#module-overview",
    "href": "index.html#module-overview",
    "title": "cjm-transcription-plugin-whisper",
    "section": "Module Overview",
    "text": "Module Overview\nDetailed documentation for each module in the project:\n\nWhisper Plugin (plugin.ipynb)\n\nPlugin implementation for OpenAI Whisper transcription\n\n\nImport\nfrom cjm_transcription_plugin_whisper.plugin import (\n    WhisperLocalPlugin\n)\n\n\nClasses\nclass WhisperLocalPlugin:\n    def __init__(self):\n        \"\"\"Initialize the Whisper plugin with default configuration.\"\"\"\n        self.logger = logging.getLogger(f\"{__name__}.{type(self).__name__}\")\n        self.config = {}\n        self.model = None\n        self.device = None\n        self.model_dir = None\n    \n    @property\n    def name(\n        self\n    ) -&gt; str: # the plugin name identifier\n    \"OpenAI Whisper transcription plugin.\"\n    \n    def __init__(self):\n            \"\"\"Initialize the Whisper plugin with default configuration.\"\"\"\n            self.logger = logging.getLogger(f\"{__name__}.{type(self).__name__}\")\n            self.config = {}\n            self.model = None\n            self.device = None\n            self.model_dir = None\n        \n        @property\n        def name(\n            self\n        ) -&gt; str: # the plugin name identifier\n        \"Initialize the Whisper plugin with default configuration.\"\n    \n    def name(\n            self\n        ) -&gt; str: # the plugin name identifier\n        \"Get the plugin name identifier.\"\n    \n    def version(\n            self\n        ) -&gt; str: # the plugin version string\n        \"Get the plugin version string.\"\n    \n    def supported_formats(\n            self\n        ) -&gt; List[str]: # list of supported audio file formats\n        \"Get the list of supported audio file formats.\"\n    \n    def get_config_schema(\n        ) -&gt; Dict[str, Any]: # the configuration schema dictionary\n        \"Return configuration schema for Whisper.\"\n    \n    def get_current_config(\n            self\n        ) -&gt; Dict[str, Any]: # the current configuration dictionary\n        \"Return current configuration.\"\n    \n    def initialize(\n            self,\n            config: Optional[Dict[str, Any]] = None # configuration dictionary to initialize the plugin\n        ) -&gt; None\n        \"Initialize the plugin with configuration.\"\n    \n    def execute(\n            self,\n            audio: Union[AudioData, str, Path], # audio data or path to audio file to transcribe\n            **kwargs # additional arguments to override config\n        ) -&gt; TranscriptionResult: # transcription result with text and metadata\n        \"Transcribe audio using Whisper.\"\n    \n    def is_available(\n            self\n        ) -&gt; bool: # True if Whisper and its dependencies are available\n        \"Check if Whisper is available.\"\n    \n    def cleanup(\n            self\n        ) -&gt; None\n        \"Clean up resources.\"",
    "crumbs": [
      "cjm-transcription-plugin-whisper"
    ]
  }
]